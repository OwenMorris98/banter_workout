# PWA Conversion Task List for Workout Application

## 1. Create Web App Manifest
- Create public/manifest.json file with:
  ```json
  {
    "name": "AI Workout Planner",
    "short_name": "WorkoutAI",
    "description": "AI-powered workout planning assistant",
    "start_url": "/",
    "display": "standalone",
    "background_color": "#ffffff",
    "theme_color": "#000000",
    "icons": [
      {
        "src": "/icon-192x192.png",
        "sizes": "192x192",
        "type": "image/png"
      },
      {
        "src": "/icon-512x512.png",
        "sizes": "512x512",
        "type": "image/png"
      },
      {
        "src": "/icon-maskable.png",
        "sizes": "512x512",
        "type": "image/png",
        "purpose": "maskable"
      }
    ]
  }
  ```

## 2. Create App Icons
- Design and create icon images that match your application's branding:
  - public/icon-192x192.png
  - public/icon-512x512.png
  - public/icon-maskable.png (for adaptive icons)
  - public/apple-icon.png (for iOS)
  - Create favicon.ico

## 3. Update Layout with Metadata
- Modify app/layout.tsx to include PWA metadata:
  ```tsx
  import { Metadata } from 'next'
  
  export const metadata: Metadata = {
    title: 'AI Workout Planner',
    description: 'Create personalized workout plans with AI',
    manifest: '/manifest.json',
    themeColor: '#000000',
    appleWebApp: {
      capable: true,
      statusBarStyle: 'default',
      title: 'AI Workout Planner'
    },
    viewport: 'width=device-width, initial-scale=1, maximum-scale=1'
  }
  
  export default function RootLayout({ children }) {
    return (
      <html lang="en">
        <head>
          <link rel="apple-touch-icon" href="/apple-icon.png" />
        </head>
        <body>{children}</body>
      </html>
    )
  }
  ```

## 4. Create Service Worker
- Create public/sw.js file with cache strategies for workout data:
  ```js
  const CACHE_NAME = 'workout-app-v1';
  const urlsToCache = [
    '/',
    '/workouts/add-workout',
    '/manifest.json',
    '/icon-192x192.png',
    '/icon-512x512.png'
  ];
  
  // Install event - cache essential assets
  self.addEventListener('install', (event) => {
    event.waitUntil(
      caches.open(CACHE_NAME).then((cache) => {
        return cache.addAll(urlsToCache);
      })
    );
  });
  
  // Cache workout plans data when fetched
  self.addEventListener('fetch', (event) => {
    if (event.request.url.includes('/api/workouts/chat-workout')) {
      // Special handling for API requests
      event.respondWith(
        fetch(event.request)
          .then((response) => {
            const clonedResponse = response.clone();
            caches.open(CACHE_NAME).then((cache) => {
              cache.put(event.request, clonedResponse);
            });
            return response;
          })
          .catch(() => {
            return caches.match(event.request);
          })
      );
    } else {
      // Standard cache-first strategy for other resources
      event.respondWith(
        caches.match(event.request).then((cachedResponse) => {
          return cachedResponse || fetch(event.request).then((response) => {
            const responseClone = response.clone();
            caches.open(CACHE_NAME).then((cache) => {
              cache.put(event.request, responseClone);
            });
            return response;
          });
        }).catch(() => {
          // Return offline page for navigation requests
          if (event.request.mode === 'navigate') {
            return caches.match('/offline.html');
          }
        })
      );
    }
  });
  ```

## 5. Create and Implement Service Worker Registration
- Create components/pwa/register-sw.tsx:
  ```tsx
  'use client'
  
  import { useEffect } from 'react'
  
  export function RegisterSW() {
    useEffect(() => {
      if ('serviceWorker' in navigator && typeof window !== 'undefined') {
        window.addEventListener('load', () => {
          navigator.serviceWorker.register('/sw.js')
            .then(registration => {
              console.log('Service Worker registered with scope:', registration.scope)
            })
            .catch(error => {
              console.error('Service Worker registration failed:', error)
            })
        })
      }
    }, [])
  
    return null
  }
  ```

- Add RegisterSW to app/layout.tsx:
  ```tsx
  import { RegisterSW } from '@/components/pwa/register-sw'
  
  export default function RootLayout({ children }) {
    return (
      <html lang="en">
        <head>{/* existing head content */}</head>
        <body>
          {children}
          <RegisterSW />
        </body>
      </html>
    )
  }
  ```

## 6. Create Offline Page
- Create public/offline.html:
  ```html
  <!DOCTYPE html>
  <html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Offline - AI Workout Planner</title>
    <style>
      body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        max-width: 600px;
        margin: 0 auto;
        padding: 2rem;
        text-align: center;
      }
      h1 { margin-bottom: 1rem; }
    </style>
  </head>
  <body>
    <h1>You're Offline</h1>
    <p>The AI Workout Planner requires an internet connection to create new workouts.</p>
    <p>If you've already created workouts, you can view them while offline.</p>
  </body>
  </html>
  ```

## 7. Modify useWorkoutChat for Offline Support
- Update hooks/useWorkoutChat.ts to handle offline scenarios:
  ```typescript
  // Add to useWorkoutChat.ts
  const [isOffline, setIsOffline] = useState(false);
  
  useEffect(() => {
    const handleOnline = () => setIsOffline(false);
    const handleOffline = () => setIsOffline(true);
    
    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    
    // Set initial state
    setIsOffline(!navigator.onLine);
    
    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);
  
  // Modify fetchWorkout to handle offline state
  async function fetchWorkout(messages: Message[]): Promise<WorkoutPlan> {
    if (isOffline) {
      // Check cache for previously generated plans
      try {
        const cache = await caches.open('workout-app-v1');
        const cachedResponse = await cache.match('/api/workouts/chat-workout');
        
        if (cachedResponse) {
          return await cachedResponse.json();
        }
      } catch (e) {
        console.error('Error accessing cache:', e);
      }
      
      throw new Error('You are offline and no cached workouts are available');
    }
    
    // Original implementation
    const response = await fetch('/api/workouts/chat-workout', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ messages: [...messages] }),
    });
    
    const data: WorkoutPlan = await response.json();
    return data;
  }
  ```

## 8. Implement Workout Caching & Local Storage
- Create local storage utility for offline workouts:
  ```typescript
  // lib/storage/workout-storage.ts
  import { WorkoutPlan } from '@/components/workouts/chat/chat-interfaces';
  
  const WORKOUT_STORAGE_KEY = 'workout_plans';
  
  export function saveWorkoutToLocalStorage(plan: WorkoutPlan): void {
    if (typeof window === 'undefined') return;
    
    try {
      // Get existing saved workouts
      const savedWorkouts = getSavedWorkouts();
      
      // Add the new workout with a timestamp
      savedWorkouts.push({
        plan,
        savedAt: new Date().toISOString(),
        id: `local-${Date.now()}`
      });
      
      // Save back to localStorage
      localStorage.setItem(WORKOUT_STORAGE_KEY, JSON.stringify(savedWorkouts));
    } catch (error) {
      console.error('Error saving workout to localStorage:', error);
    }
  }
  
  export function getSavedWorkouts(): Array<{plan: WorkoutPlan, savedAt: string, id: string}> {
    if (typeof window === 'undefined') return [];
    
    try {
      const saved = localStorage.getItem(WORKOUT_STORAGE_KEY);
      return saved ? JSON.parse(saved) : [];
    } catch (error) {
      console.error('Error reading workouts from localStorage:', error);
      return [];
    }
  }
  ```

- Update handleSave in useWorkoutChat.ts to save locally:
  ```typescript
  import { saveWorkoutToLocalStorage } from '@/lib/storage/workout-storage';
  
  // Inside handleSave function
  try {
    if (navigator.onLine) {
      // Online saving logic (existing code)
      await Promise.all(workoutPlan.schedule.map(async (day) => {
        // ...existing API calls
      }));
    } else {
      // Offline saving to localStorage
      saveWorkoutToLocalStorage(workoutPlan);
    }
    
    onSaveSuccess?.();
    return true;
  } catch (error) {
    // ...existing error handling
  }
  ```

## 9. Create InstallPrompt Component
- Create components/pwa/install-prompt.tsx:
  ```tsx
  'use client'
  
  import { useState, useEffect } from 'react'
  import { Button } from '@/components/ui/button'
  
  export function InstallPrompt() {
    const [showIOSPrompt, setShowIOSPrompt] = useState(false)
    const [installPrompt, setInstallPrompt] = useState<Event | null>(null)
    
    useEffect(() => {
      // Check if on iOS
      const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream
      const isStandalone = 'standalone' in window.navigator && (window.navigator as any).standalone
      
      if (isIOS && !isStandalone) {
        // Show iOS install instructions after user interaction
        const timer = setTimeout(() => setShowIOSPrompt(true), 60000)
        return () => clearTimeout(timer)
      }
      
      // For other browsers using beforeinstallprompt
      const handleBeforeInstallPrompt = (e: Event) => {
        e.preventDefault()
        setInstallPrompt(e)
      }
      
      window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt)
      
      return () => {
        window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt)
      }
    }, [])
    
    const handleInstallClick = async () => {
      if (!installPrompt) return
      
      // Show the install prompt
      const promptEvent = installPrompt as any
      promptEvent.prompt()
      
      // Wait for the user to respond to the prompt
      const { outcome } = await promptEvent.userChoice
      console.log(`User response to install prompt: ${outcome}`)
      
      // Clear the saved prompt
      setInstallPrompt(null)
    }
    
    if (installPrompt) {
      return (
        <div className="fixed bottom-4 right-4 bg-black p-4 rounded-lg shadow-lg z-50">
          <p className="text-white mb-2">Install this app for an enhanced experience!</p>
          <Button onClick={handleInstallClick}>Install App</Button>
        </div>
      )
    }
    
    if (showIOSPrompt) {
      return (
        <div className="fixed bottom-4 right-4 bg-black p-4 rounded-lg shadow-lg z-50 max-w-xs">
          <p className="text-white mb-2">
            Install this app on your iPhone: tap
            <svg className="inline-block h-5 w-5 mx-1" fill="currentColor" viewBox="0 0 20 20">
              <path d="M13 5l3 3-3 3V8H4V6h9V5z" />
            </svg>
            then "Add to Home Screen"
          </p>
          <Button onClick={() => setShowIOSPrompt(false)}>Dismiss</Button>
        </div>
      )
    }
    
    return null
  }
  ```

- Add InstallPrompt to app/layout.tsx:
  ```tsx
  import { InstallPrompt } from '@/components/pwa/install-prompt'
  
  export default function RootLayout({ children }) {
    return (
      <html lang="en">
        <head>{/* existing head content */}</head>
        <body>
          {children}
          <RegisterSW />
          <InstallPrompt />
        </body>
      </html>
    )
  }
  ```

## 10. Update next.config.js
- Create or update next.config.js:
  ```js
  /** @type {import('next').NextConfig} */
  const nextConfig = {
    // Existing config...
    
    // Add headers for PWA
    async headers() {
      return [
        {
          source: '/sw.js',
          headers: [
            {
              key: 'Cache-Control',
              value: 'public, max-age=0, must-revalidate',
            },
            {
              key: 'Service-Worker-Allowed',
              value: '/',
            },
          ],
        },
        {
          source: '/manifest.json',
          headers: [
            {
              key: 'Cache-Control',
              value: 'public, max-age=0, must-revalidate',
            },
          ],
        },
        {
          source: '/(.*)',
          headers: [
            {
              key: 'X-Content-Type-Options',
              value: 'nosniff',
            },
            {
              key: 'X-Frame-Options',
              value: 'DENY',
            },
            {
              key: 'X-XSS-Protection',
              value: '1; mode=block',
            },
          ],
        },
      ];
    },
  };
  
  module.exports = nextConfig;
  ```

## 11. Implement Offline UI Indicators
- Create components/ui/offline-indicator.tsx:
  ```tsx
  'use client'
  
  import { useState, useEffect } from 'react'
  
  export function OfflineIndicator() {
    const [isOffline, setIsOffline] = useState(false)
    
    useEffect(() => {
      const handleOnline = () => setIsOffline(false)
      const handleOffline = () => setIsOffline(true)
      
      // Set initial state
      setIsOffline(!navigator.onLine)
      
      window.addEventListener('online', handleOnline)
      window.addEventListener('offline', handleOffline)
      
      return () => {
        window.removeEventListener('online', handleOnline)
        window.removeEventListener('offline', handleOffline)
      }
    }, [])
    
    if (!isOffline) return null
    
    return (
      <div className="fixed top-0 left-0 right-0 bg-red-500 text-white py-2 text-center z-50">
        You are offline. Some features may be limited.
      </div>
    )
  }
  ```

- Add to app/layout.tsx:
  ```tsx
  import { OfflineIndicator } from '@/components/ui/offline-indicator'
  
  export default function RootLayout({ children }) {
    return (
      <html lang="en">
        <body>
          <OfflineIndicator />
          {children}
          {/* Other components */}
        </body>
      </html>
    )
  }
  ```

## 12. Update WorkoutChat Component for Offline
- Modify WorkoutChat component to handle offline state:
  ```tsx
  // Add to workout-chat.tsx
  const [isOffline, setIsOffline] = useState(false);
  
  useEffect(() => {
    const handleOnline = () => setIsOffline(false);
    const handleOffline = () => setIsOffline(true);
    
    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    
    // Set initial state
    setIsOffline(!navigator.onLine);
    
    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);
  
  // Add in the return JSX
  {!submitted && 
    <form onSubmit={handleSubmit} className="flex space-x-4">
      <Input
        value={input}
        onChange={(e) => setInput(e.target.value)}
        placeholder={isOffline ? "You're offline. Connect to use AI chat." : "Ask for a workout plan..."}
        className="flex-grow"
        disabled={isLoading || isOffline}
      />
      <Button type="submit" disabled={isLoading || isOffline}>
        {isLoading ? (
          <div className="animate-spin h-5 w-5 border-2 border-white border-t-transparent rounded-full" />
        ) : (
          'Send'
        )}
      </Button>
    </form>
  }
  ```

## 13. Add "View Offline Workouts" Feature
- Create components/workouts/offline-workouts.tsx:
  ```tsx
  'use client'
  
  import { useState, useEffect } from 'react'
  import { Button } from '@/components/ui/button'
  import { getSavedWorkouts } from '@/lib/storage/workout-storage'
  import { WorkoutPlan } from '@/components/workouts/chat/chat-interfaces'
  
  export function OfflineWorkouts({ onSelect }: { onSelect: (plan: WorkoutPlan) => void }) {
    const [savedWorkouts, setSavedWorkouts] = useState<Array<{plan: WorkoutPlan, savedAt: string, id: string}>>([])
    
    useEffect(() => {
      setSavedWorkouts(getSavedWorkouts())
    }, [])
    
    if (savedWorkouts.length === 0) {
      return <p className="text-sm text-gray-500">No saved workouts found.</p>
    }
    
    return (
      <div className="mt-4">
        <h3 className="font-bold mb-2">Saved Workouts</h3>
        <div className="space-y-2">
          {savedWorkouts.map((item) => (
            <div key={item.id} className="border rounded-md p-3">
              <p className="text-sm mb-1">
                Saved on {new Date(item.savedAt).toLocaleString()}
              </p>
              <p className="text-sm mb-2">
                {item.plan.schedule.length} day{item.plan.schedule.length !== 1 ? 's' : ''} plan
              </p>
              <Button size="sm" onClick={() => onSelect(item.plan)}>
                Load this workout
              </Button>
            </div>
          ))}
        </div>
      </div>
    )
  }
  ```

- Update PlanWorkout.tsx to include offline workouts:
  ```tsx
  import { OfflineWorkouts } from './offline-workouts'
  
  // Inside PlanWorkout component
  const [isOffline, setIsOffline] = useState(false);
  
  useEffect(() => {
    setIsOffline(!navigator.onLine);
    
    const handleOnline = () => setIsOffline(false);
    const handleOffline = () => setIsOffline(true);
    
    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    
    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);
  
  // Add in the return JSX
  {isOffline && (
    <div className="mb-6 p-4 border rounded-lg bg-orange-50">
      <h2 className="font-bold mb-2">You're Offline</h2>
      <p className="mb-4">You can still view your saved workouts:</p>
      <OfflineWorkouts onSelect={(plan) => {
        // Access the WorkoutChat component through a ref or other mechanism
        // and set the plan
      }} />
    </div>
  )}
  ```

## 14. Testing and Optimization
- Create a Lighthouse testing script:
  ```bash
  #!/bin/bash
  # Run Lighthouse tests for PWA
  npx lighthouse https://your-site.com --output=html --output-path=./lighthouse-report.html --preset=desktop --only-categories=performance,pwa
  ```

- Test the PWA on different devices and internet conditions:
  - iOS Safari
  - Android Chrome/Firefox
  - Desktop browsers
  - Test with network throttling enabled
  - Test offline mode
  - Test installation flow

## 15. Deploy and Finalize
- Deploy your PWA to production
- Submit the site to Google for PWA "Add to Home Screen" prompt indexing
- Create a small documentation page explaining how to install the app
- Update any share links to use the Web Share API where available:
  ```typescript
  // Inside copyWorkoutToClipboard function in useWorkoutChat.ts
  const shareWorkout = async () => {
    if (navigator.share) {
      try {
        // Format workout as before...
        await navigator.share({
          title: 'My Workout Plan',
          text: formattedWorkout,
          url: window.location.href
        });
        return true;
      } catch (error) {
        // Fall back to clipboard
        console.log('Error sharing:', error);
        // Use clipboard API as fallback
        navigator.clipboard.writeText(formattedWorkout);
        return true;
      }
    } else {
      // Use clipboard API as before
      navigator.clipboard.writeText(formattedWorkout);
      return true;
    }
  };
  ```